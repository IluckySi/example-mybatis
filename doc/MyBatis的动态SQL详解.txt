MyBatis的动态SQL详解

MyBatis的动态SQL是基于OGNL表达式的，它可以帮助我们方便的在SQL语句中实现某些逻辑。

MyBatis中用于实现动态SQL的元素主要有：if、choose（when\otherwise）、trim、where、set、foreach

1. if就是简单的条件判断，利用if语句我们可以实现某些简单的条件选择。
以下语句的意思非常简单，如果你提供了name参数，那么就要满足name=#{name}，同样如果你提供了sex和age的时候，它们也需要满足相应的条件，之后就是返回满足这些条件的所有User，
这是非常有用的一个功能，以往我们使用其他类型框架或者直接使用JDBC的时候， 如果我们要达到同样的选择效果的时候，我们就需要拼SQL语句，这是极其麻烦的，比起来，上述的动态SQL就要简单多了。
Xml代码
<select id="dynamicIfTest" parameterType="User" resultType="User">
        select * from USERS where 1 = 1
        <if test="name != null">
            and name = #{name}
        </if>
        <if test="sex != null">
            and sex = #{sex}
        </if>
        <if test="age!= 0">
            and age = #{age}
        </if>
</select>

2. choose元素的作用就相当于JAVA中的switch语句，基本上跟JSTL中的choose的作用和用法是一样的，通常都是与when和otherwise搭配的。
when元素表示当when中的条件满足的时候就输出其中的内容，跟JAVA中的switch效果差不多的是按照条件的顺序，当when中有条件满足的时候，就会跳出choose，即所有的when和otherwise条件中，只有一个会输出，当所有的条件都不满足的时候就输出otherwise中的内容。
所以上述语句的意思非常简单， 当name!=null的时候就输出and name = #{name}，不再往下判断条件，当sex为空且sex!=null的时候就输出and sex = #{sex}，当所有条件都不满足的时候就输出otherwise中的内容。

Xml代码
<select id="dynamicChooseTest" parameterType="User" resultType="User">
    select * from USERS where 1 = 1
    <choose>
        <when test="sex != null">
            and sex = #{sex}
        </when>
        <when test="name != null">
            and name = #{name}
        </when>
        <otherwise>
            and age > 0
        </otherwise>
    </choose>
</select>

3. where语句的作用主要是简化SQL语句中where中的条件判断的。
where元素的作用是会在写入where元素的地方输出一个where，另外一个好处是不需要考虑where元素里面的条件输出是什么样子的，
MyBatis会智能的帮你处理，如果所有的条件都不满足那么MyBatis就会查出所有的记录，如果输出后是and 开头的，MyBatis会把第一个and忽略，当然如果是or开头的，MyBatis也会把它忽略；
此外，在where元素中你不需要考虑空格的问题，MyBatis会智能的帮你加上。
像例子中，name=null， sex != null，那么输出的整个语句会是select * from USERS where name = #{name}，而不是select * from USERS where and sex = #{sex}，因为MyBatis会智能的把首个and 或 or 给忽略。

Xml代码
<select id="dynamicWhereTest" parameterType="User" resultType="User">
    select * from USERS
    <where>
        <if test="name != null">
            name = #{name}
        </if>
        <if test="sex != null">
            and sex = #{sex}
        </if>
        <if test="age!= 0">
            and age = #{age}
        </if>
    </where>
</select>

4. trim元素的主要功能是可以在自己包含的内容前加上某些前缀，也可以在其后加上某些后缀，与之对应的属性是prefix和suffix。
可以把包含内容的首部某些内容覆盖，即忽略，也可以把尾部的某些内容覆盖，对应的属性是prefixOverrides和suffixOverrides；
正因为trim有这样的功能，所以我们也可以非常简单的利用trim来代替where元素的功能.

Xml代码
<select id="dynamicTrimTest" parameterType="User" resultType="User">
    select * from USERS
    <trim prefix="where" prefixOverrides="and | or">
        <if test="name != null">
            name = #{name}
        </if>
        <if test="sex != null">
            or sex = #{sex}
        </if>
        <if test="age!= 0">
            and age = #{age}
        </if>
    </trim>
</select>

5.1 set元素主要是用在更新操作的时候，它的主要功能和where元素是差不多的。
主要是在包含的语句前输出一个set，然后如果包含的语句是以逗号结束的话将会把该逗号忽略，如果set包含的内容为空的话则会出错。
有了set元素我们就可以动态的更新那些修改了的字段。
Xml代码
<update id="dynamicSetTest1" parameterType="User">
    update USERS
    <set>
        <if test="name != null">
            name = #{name},
        </if>
        <if test="sex != null">
            sex = #{sex},
        </if>
        <if test="age!= 0">
            age = #{age},
        </if>
    </set>
    where id = #{id}
</update>
5.2 同上
Xml代码
<update id="dynamicSetTest2" parameterType="User">
    update USERS
    <trim prefix="set" suffixOverrides=",">
        <if test="name != null">
            name = #{name},
        </if>
        <if test="sex != null">
             sex = #{sex},
        </if>
        <if test="age!= 0">
             age = #{age},
        </if>
    </trim>
    where id = #{id}
</update>
上述示例代码中，如果set中一个条件都不满足，即set中包含的内容为空的时候就会报错。

6.1 单参数List的类型
Xml代码
<select id="dynamicForeach1Test" resultType="User">
    select * from Users where id in
    <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
        #{item}
    </foreach>
</select

6.2 单参数array数组的类型
Xml代码
<select id="dynamicForeach3Test" resultType="User">
    select * from Users where name like "%"#{name}"%" and id in
    <foreach collection="ids" index="index" item="item" open="(" separator="," close=")">
        #{item}
    </foreach>
</select>

6.3 自己把参数封装成Map的类型
Xml代码
<select id="dynamicForeach3Test" resultType="User">
    select * from Users where title like "%"#{title}"%" and id in
    <foreach collection="ids" index="index" item="item" open="(" separator="," close=")">
        #{item}
    </foreach>
</select>

foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。foreach元素的属性主要有item，index，collection，open，separator，close。item表示集合中每一个元素进行迭代时的别名，index指定一个名字，用于表示在迭代过程中，每次迭代到的位置，open表示该语句以什么开始，separator表示在每次进行迭代之间以什么符号作为分隔符，close表示以什么结束，在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况下，该属性的值是不一样的，主要有一下3种情况：
如果传入的是单参数且参数类型是一个List的时候，collection属性值为list
如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array
如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key